[gd_scene load_steps=44 format=2]

[ext_resource path="res://ASSETS/GRAPHICS/TMP/Kindergarten Massaker_TITRE+CHARACTER_DESIGNS.png" type="Texture" id=1]
[ext_resource path="res://SHADERS/TMP/CRT_2.gdshader" type="Shader" id=2]
[ext_resource path="res://SHADERS/TMP/glitch_effect_A.shader" type="Shader" id=3]
[ext_resource path="res://SHADERS/TMP/CRT_1.gdshader" type="Shader" id=4]
[ext_resource path="res://SHADERS/TMP/glitch_effect_B.shader" type="Shader" id=5]
[ext_resource path="res://SHADERS/TMP/GodotRetro/Screen Shaders/Aditional Shaders/ColorPrecission.shader" type="Shader" id=6]
[ext_resource path="res://SHADERS/TMP/GodotRetro/Screen Shaders/Glitch.shader" type="Shader" id=7]
[ext_resource path="res://SHADERS/TMP/GodotRetro/Screen Shaders/VHSPause.shader" type="Shader" id=8]
[ext_resource path="res://SHADERS/TMP/GodotRetro/Screen Shaders/Aditional Shaders/BetterCC.shader" type="Shader" id=9]
[ext_resource path="res://SHADERS/TMP/GodotRetro/Screen Shaders/Aditional Shaders/Dithering.shader" type="Shader" id=10]
[ext_resource path="res://SHADERS/TMP/GodotRetro/Screen Shaders/Aditional Shaders/B&W.shader" type="Shader" id=11]
[ext_resource path="res://SHADERS/TMP/GodotRetro/Screen Shaders/Aditional Shaders/Sharpness.shader" type="Shader" id=12]
[ext_resource path="res://SHADERS/TMP/GodotRetro/Screen Shaders/TV.shader" type="Shader" id=13]
[ext_resource path="res://SHADERS/TMP/GodotRetro/Screen Shaders/Aditional Shaders/Blur.shader" type="Shader" id=14]
[ext_resource path="res://SHADERS/TMP/GodotRetro/Screen Shaders/NTSCBasic.shader" type="Shader" id=15]
[ext_resource path="res://SHADERS/TMP/glitch_effect_C.shader" type="Shader" id=16]
[ext_resource path="res://SHADERS/TMP/GodotRetro/Screen Shaders/NTSC.shader" type="Shader" id=17]
[ext_resource path="res://SHADERS/TMP/GodotRetro/Screen Shaders/Grain.shader" type="Shader" id=18]
[ext_resource path="res://SHADERS/TMP/GodotRetro/Screen Shaders/SimpleGrain.shader" type="Shader" id=19]
[ext_resource path="res://SHADERS/TMP/GodotRetro/Screen Shaders/VHS.shader" type="Shader" id=20]
[ext_resource path="res://SHADERS/TMP/GodotRetro/Other/Images/bluenoise128x128.png" type="Texture" id=21]

[sub_resource type="ShaderMaterial" id=6]
shader = ExtResource( 16 )
shader_param/brightness = 0.058
shader_param/size = 1.646

[sub_resource type="ShaderMaterial" id=3]
shader = ExtResource( 3 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.1
shader_param/scanlines_width = 0.1
shader_param/grille_opacity = 0.1
shader_param/resolution = Vector2( 480, 270 )
shader_param/pixelate = false
shader_param/roll = true
shader_param/roll_speed = 1.0
shader_param/roll_size = 3.0
shader_param/roll_variation = 5.0
shader_param/distort_intensity = 0.008
shader_param/noise_opacity = 0.55
shader_param/noise_speed = 5.0
shader_param/static_noise_intensity = 0.07
shader_param/aberration = -0.01
shader_param/brightness = 1.1
shader_param/discolor = true
shader_param/saturation = 0.0
shader_param/contrast = 1.0
shader_param/warp_amount = 0.0
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.2
shader_param/vignette_opacity = 0.25

[sub_resource type="ShaderMaterial" id=4]
shader = ExtResource( 5 )
shader_param/shake_power = 0.03
shader_param/shake_rate = 0.2
shader_param/shake_speed = 5.0
shader_param/shake_block_size = 25.0
shader_param/shake_color_rate = 0.005

[sub_resource type="ShaderMaterial" id=8]
shader = ExtResource( 18 )
shader_param/colored = true
shader_param/color_amount = 1.0
shader_param/grain_amount = 0.025
shader_param/grain_size = 1.25
shader_param/lum_amount = 1.3

[sub_resource type="ShaderMaterial" id=17]
shader = ExtResource( 10 )
shader_param/SCREEN_WIDTH = 480.0
shader_param/COLOR_FACTOR = 1.797
shader_param/DITHERING_STRENTH = 0.068

[sub_resource type="ShaderMaterial" id=11]
shader = ExtResource( 19 )
shader_param/amount = 0.223

[sub_resource type="ShaderMaterial" id=5]
shader = ExtResource( 14 )
shader_param/amount = 1.0

[sub_resource type="ShaderMaterial" id=7]
shader = ExtResource( 20 )
shader_param/tape_wave_amount = 0.003
shader_param/tape_crease_amount = 2.5
shader_param/color_displacement = 1.0
shader_param/lines_velocity = 0.1

[sub_resource type="ShaderMaterial" id=9]
shader = ExtResource( 17 )
shader_param/blur_amount = 3.0
shader_param/signal_quality = 0.0
shader_param/bottom_strenth = 3.0
shader_param/grain_tex = ExtResource( 21 )

[sub_resource type="ShaderMaterial" id=10]
shader = ExtResource( 15 )
shader_param/_bleeding = 0.5
shader_param/_fringing = 0.5
shader_param/_scanline = 0.0
shader_param/linearColorSpace = false

[sub_resource type="ShaderMaterial" id=13]
shader = ExtResource( 8 )
shader_param/shake_amount_x = 250.0
shader_param/shake_amount_y = 40.0
shader_param/white_hlines = 50.0
shader_param/white_vlines = 80.0

[sub_resource type="ShaderMaterial" id=14]
shader = ExtResource( 11 )
shader_param/contrast = 1.661
shader_param/brightness = 0.271

[sub_resource type="ShaderMaterial" id=15]
shader = ExtResource( 9 )
shader_param/Shadows = Color( 0.435294, 0.255294, 0.255294, 1 )
shader_param/Midtones = Color( 0.251765, 0.560784, 0.251765, 1 )
shader_param/Hilights = Color( 0.251569, 0.356863, 0.901961, 1 )

[sub_resource type="ShaderMaterial" id=16]
shader = ExtResource( 6 )
shader_param/SCREEN_WIDTH = 480.0
shader_param/COLOR_FACTOR = 6.106

[sub_resource type="ShaderMaterial" id=18]
shader = ExtResource( 12 )
shader_param/sharpen_amount = 1.0

[sub_resource type="ShaderMaterial" id=12]
shader = ExtResource( 13 )
shader_param/vertJerkOpt = 0.2
shader_param/vertMovementOpt = 0.0
shader_param/bottomStaticOpt = 0.0
shader_param/bottomStaticStrenth = 0.7
shader_param/scalinesOpt = 0.4
shader_param/rgbOffsetOpt = 0.2
shader_param/horzFuzzOpt = 0.15

[sub_resource type="ShaderMaterial" id=19]
shader = ExtResource( 7 )
shader_param/_ScanLineJitter = 0.25
shader_param/_VerticalJump = 0.01
shader_param/_HorizontalShake = 0.0
shader_param/_ColorDrift = 0.02

[sub_resource type="Shader" id=21]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=20]
shader = SubResource( 21 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.4
shader_param/scanlines_width = 0.25
shader_param/grille_opacity = 0.3
shader_param/resolution = Vector2( 640, 480 )
shader_param/pixelate = true
shader_param/roll = true
shader_param/roll_speed = 8.0
shader_param/roll_size = 15.0
shader_param/roll_variation = 3.419
shader_param/distort_intensity = 0.061
shader_param/noise_opacity = 0.798
shader_param/noise_speed = 5.0
shader_param/static_noise_intensity = 0.187
shader_param/aberration = -0.089
shader_param/brightness = 1.4
shader_param/discolor = true
shader_param/warp_amount = 0.0
shader_param/clip_warp = true
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 0.441

[sub_resource type="ShaderMaterial" id=1]
shader = ExtResource( 4 )
shader_param/crt_curve = 0.0
shader_param/crt_scan_line_color = 0.288
shader_param/aperture_grille_rate = 0.697
shader_param/rf_switch_esque_blur = 0.407
shader_param/white_noise_rate = 0.753

[sub_resource type="ShaderMaterial" id=2]
shader = ExtResource( 2 )
shader_param/res = Vector2( 480, 270 )
shader_param/mask_type = 0
shader_param/bloom_type = 0
shader_param/hardScan = -8.0
shader_param/hardPix = -2.0
shader_param/hardBloomScan = -2.0
shader_param/hardBloomPix = -1.5
shader_param/bloomAmount = 16.0
shader_param/warp = Vector2( 480, 270 )
shader_param/maskDark = 0.5
shader_param/maskLight = 1.5

[sub_resource type="ShaderMaterial" id=22]
shader = ExtResource( 2 )
shader_param/res = null
shader_param/mask_type = 0
shader_param/bloom_type = 0
shader_param/hardScan = -8.0
shader_param/hardPix = -2.0
shader_param/hardBloomScan = -2.0
shader_param/hardBloomPix = -1.5
shader_param/bloomAmount = 16.0
shader_param/warp = Vector2( 480, 270 )
shader_param/maskDark = 0.5
shader_param/maskLight = 1.5

[node name="Node2D" type="Node2D"]

[node name="Sprite" type="Sprite" parent="."]
position = Vector2( 240, 135 )
texture = ExtResource( 1 )

[node name="Shaders alone" type="Node2D" parent="."]
visible = false

[node name="BackBuffer_SimpleGlitch" type="BackBufferCopy" parent="Shaders alone"]
visible = false
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="Shaders alone/BackBuffer_SimpleGlitch"]
material = SubResource( 6 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_Glitch_Effect_A" type="BackBufferCopy" parent="Shaders alone"]
visible = false
position = Vector2( 240, 135 )
copy_mode = 2

[node name="ColorRect3_MAGIC!" type="ColorRect" parent="Shaders alone/BackBuffer_Glitch_Effect_A"]
material = SubResource( 3 )
margin_left = -240.0
margin_top = -135.0
margin_right = 240.0
margin_bottom = 135.0

[node name="BackBuffer_Glitch_Effect_B" type="BackBufferCopy" parent="Shaders alone"]
visible = false
position = Vector2( 240, 135 )
copy_mode = 2

[node name="ColorRect4_MAGIC!" type="ColorRect" parent="Shaders alone/BackBuffer_Glitch_Effect_B"]
material = SubResource( 4 )
margin_left = -240.0
margin_top = -135.0
margin_right = 240.0
margin_bottom = 135.0

[node name="BackBuffer_Grain" type="BackBufferCopy" parent="Shaders alone"]
visible = false
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="Shaders alone/BackBuffer_Grain"]
material = SubResource( 8 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_Dithering" type="BackBufferCopy" parent="Shaders alone"]
visible = false
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="Shaders alone/BackBuffer_Dithering"]
material = SubResource( 17 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_SimpleGrain" type="BackBufferCopy" parent="Shaders alone"]
visible = false
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="Shaders alone/BackBuffer_SimpleGrain"]
material = SubResource( 11 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_Blur" type="BackBufferCopy" parent="Shaders alone"]
visible = false
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="Shaders alone/BackBuffer_Blur"]
material = SubResource( 5 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_VHS" type="BackBufferCopy" parent="Shaders alone"]
visible = false
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="Shaders alone/BackBuffer_VHS"]
material = SubResource( 7 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_NTSC" type="BackBufferCopy" parent="Shaders alone"]
visible = false
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="Shaders alone/BackBuffer_NTSC"]
material = SubResource( 9 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_NTSCBasic" type="BackBufferCopy" parent="Shaders alone"]
visible = false
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="Shaders alone/BackBuffer_NTSCBasic"]
material = SubResource( 10 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_VHSPause" type="BackBufferCopy" parent="Shaders alone"]
visible = false
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="Shaders alone/BackBuffer_VHSPause"]
material = SubResource( 13 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_B&W" type="BackBufferCopy" parent="Shaders alone"]
visible = false
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="Shaders alone/BackBuffer_B&W"]
material = SubResource( 14 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_BetterCC" type="BackBufferCopy" parent="Shaders alone"]
visible = false
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="Shaders alone/BackBuffer_BetterCC"]
material = SubResource( 15 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_ColorPrecision" type="BackBufferCopy" parent="Shaders alone"]
visible = false
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="Shaders alone/BackBuffer_ColorPrecision"]
material = SubResource( 16 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_Sharpness" type="BackBufferCopy" parent="Shaders alone"]
visible = false
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="Shaders alone/BackBuffer_Sharpness"]
material = SubResource( 18 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_TV" type="BackBufferCopy" parent="Shaders alone"]
visible = false
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="Shaders alone/BackBuffer_TV"]
material = SubResource( 12 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_Glitch" type="BackBufferCopy" parent="Shaders alone"]
visible = false
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="Shaders alone/BackBuffer_Glitch"]
material = SubResource( 19 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_AccurateCRT" type="BackBufferCopy" parent="Shaders alone"]
visible = false
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="Shaders alone/BackBuffer_AccurateCRT"]
material = SubResource( 20 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_CRT1" type="BackBufferCopy" parent="Shaders alone"]
visible = false
position = Vector2( 240, 135 )
copy_mode = 2

[node name="ColorRect1_pas_magic" type="ColorRect" parent="Shaders alone/BackBuffer_CRT1"]
material = SubResource( 1 )
margin_left = -240.0
margin_top = -135.0
margin_right = 240.0
margin_bottom = 135.0

[node name="BackBuffer_CRT2" type="BackBufferCopy" parent="Shaders alone"]
visible = false
position = Vector2( 240, 135 )
copy_mode = 2

[node name="ColorRect2_pas_magic" type="ColorRect" parent="Shaders alone/BackBuffer_CRT2"]
material = SubResource( 2 )
margin_left = -240.0
margin_top = -135.0
margin_right = 240.0
margin_bottom = 135.0

[node name="11th Set (mouif)" type="Node2D" parent="."]
visible = false

[node name="BackBuffer_SimpleGrain_11th Set" type="BackBufferCopy" parent="11th Set (mouif)"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="11th Set (mouif)/BackBuffer_SimpleGrain_11th Set"]
material = SubResource( 11 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_B&W_11th Set" type="BackBufferCopy" parent="11th Set (mouif)"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="11th Set (mouif)/BackBuffer_B&W_11th Set"]
material = SubResource( 14 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_BetterCC_11th Set" type="BackBufferCopy" parent="11th Set (mouif)"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="11th Set (mouif)/BackBuffer_BetterCC_11th Set"]
material = SubResource( 15 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_Dithering_11th Set" type="BackBufferCopy" parent="11th Set (mouif)"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="11th Set (mouif)/BackBuffer_Dithering_11th Set"]
material = SubResource( 17 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_CRT2_11th Set" type="BackBufferCopy" parent="11th Set (mouif)"]
material = SubResource( 22 )
position = Vector2( 240, 135 )
copy_mode = 2

[node name="ColorRect2_pas_magic" type="ColorRect" parent="11th Set (mouif)/BackBuffer_CRT2_11th Set"]
material = SubResource( 2 )
margin_left = -240.0
margin_top = -135.0
margin_right = 240.0
margin_bottom = 135.0

[node name="10th Set" type="Node2D" parent="."]
visible = false

[node name="BackBuffer_Glitch_Effect_A_10th Set" type="BackBufferCopy" parent="10th Set"]
position = Vector2( 240, 135 )
copy_mode = 2

[node name="ColorRect3_MAGIC!" type="ColorRect" parent="10th Set/BackBuffer_Glitch_Effect_A_10th Set"]
material = SubResource( 3 )
margin_left = -240.0
margin_top = -135.0
margin_right = 240.0
margin_bottom = 135.0

[node name="BackBuffer_Glitch_Effect_B_10th Set" type="BackBufferCopy" parent="10th Set"]
position = Vector2( 240, 135 )
copy_mode = 2

[node name="ColorRect4_MAGIC!" type="ColorRect" parent="10th Set/BackBuffer_Glitch_Effect_B_10th Set"]
material = SubResource( 4 )
margin_left = -240.0
margin_top = -135.0
margin_right = 240.0
margin_bottom = 135.0

[node name="BackBuffer_Grain_10th Set" type="BackBufferCopy" parent="10th Set"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="10th Set/BackBuffer_Grain_10th Set"]
material = SubResource( 8 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_NTSC_10th Set" type="BackBufferCopy" parent="10th Set"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="10th Set/BackBuffer_NTSC_10th Set"]
material = SubResource( 9 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_TV_10th Set" type="BackBufferCopy" parent="10th Set"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="10th Set/BackBuffer_TV_10th Set"]
material = SubResource( 12 )
margin_right = 480.0
margin_bottom = 270.0

[node name="9th Set" type="Node2D" parent="."]
visible = false

[node name="BackBuffer_VHSPause_9th Set" type="BackBufferCopy" parent="9th Set"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="9th Set/BackBuffer_VHSPause_9th Set"]
material = SubResource( 13 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_Glitch_Effect_B_9th Set" type="BackBufferCopy" parent="9th Set"]
position = Vector2( 240, 135 )
copy_mode = 2

[node name="ColorRect4_MAGIC!" type="ColorRect" parent="9th Set/BackBuffer_Glitch_Effect_B_9th Set"]
material = SubResource( 4 )
margin_left = -240.0
margin_top = -135.0
margin_right = 240.0
margin_bottom = 135.0

[node name="8th Set" type="Node2D" parent="."]
visible = false

[node name="BackBuffer_Dithering_8th Set" type="BackBufferCopy" parent="8th Set"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="8th Set/BackBuffer_Dithering_8th Set"]
material = SubResource( 17 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_Grain_8th Set" type="BackBufferCopy" parent="8th Set"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="8th Set/BackBuffer_Grain_8th Set"]
material = SubResource( 8 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_VHS_8th Set" type="BackBufferCopy" parent="8th Set"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="8th Set/BackBuffer_VHS_8th Set"]
material = SubResource( 7 )
margin_right = 480.0
margin_bottom = 270.0

[node name="7th Set" type="Node2D" parent="."]
visible = false

[node name="BackBuffer_Blur_7th Set" type="BackBufferCopy" parent="7th Set"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="7th Set/BackBuffer_Blur_7th Set"]
material = SubResource( 5 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_Sharpness_7th Set" type="BackBufferCopy" parent="7th Set"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="7th Set/BackBuffer_Sharpness_7th Set"]
material = SubResource( 18 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_TV_7th Set" type="BackBufferCopy" parent="7th Set"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="7th Set/BackBuffer_TV_7th Set"]
material = SubResource( 12 )
margin_right = 480.0
margin_bottom = 270.0

[node name="6th Set (mouif)" type="Node2D" parent="."]
visible = false

[node name="BackBuffer_Sharpness_6th Set" type="BackBufferCopy" parent="6th Set (mouif)"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="6th Set (mouif)/BackBuffer_Sharpness_6th Set"]
material = SubResource( 18 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_Dithering_6th Set" type="BackBufferCopy" parent="6th Set (mouif)"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="6th Set (mouif)/BackBuffer_Dithering_6th Set"]
material = SubResource( 17 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_NTSC_6th Set" type="BackBufferCopy" parent="6th Set (mouif)"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="6th Set (mouif)/BackBuffer_NTSC_6th Set"]
material = SubResource( 9 )
margin_right = 480.0
margin_bottom = 270.0

[node name="5th Set" type="Node2D" parent="."]
visible = false

[node name="BackBuffer_NTSCBasic_5th Set" type="BackBufferCopy" parent="5th Set"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="5th Set/BackBuffer_NTSCBasic_5th Set"]
material = SubResource( 10 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_Grain_5th Set" type="BackBufferCopy" parent="5th Set"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="5th Set/BackBuffer_Grain_5th Set"]
material = SubResource( 8 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_TV_5th Set" type="BackBufferCopy" parent="5th Set"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="5th Set/BackBuffer_TV_5th Set"]
material = SubResource( 12 )
margin_right = 480.0
margin_bottom = 270.0

[node name="4th Set" type="Node2D" parent="."]
visible = false

[node name="BackBuffer_VHSPause_4th Set" type="BackBufferCopy" parent="4th Set"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="4th Set/BackBuffer_VHSPause_4th Set"]
material = SubResource( 13 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_CRT2_4th Set" type="BackBufferCopy" parent="4th Set"]
position = Vector2( 240, 135 )
copy_mode = 2

[node name="ColorRect2_pas_magic" type="ColorRect" parent="4th Set/BackBuffer_CRT2_4th Set"]
material = SubResource( 2 )
margin_left = -240.0
margin_top = -135.0
margin_right = 240.0
margin_bottom = 135.0

[node name="3rd Set" type="Node2D" parent="."]
visible = false

[node name="BackBuffer_SimpleGlitch_3rd Set" type="BackBufferCopy" parent="3rd Set"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="3rd Set/BackBuffer_SimpleGlitch_3rd Set"]
material = SubResource( 6 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_Glitch_Effect_A_3rd Set" type="BackBufferCopy" parent="3rd Set"]
position = Vector2( 240, 135 )
copy_mode = 2

[node name="ColorRect3_MAGIC!" type="ColorRect" parent="3rd Set/BackBuffer_Glitch_Effect_A_3rd Set"]
material = SubResource( 3 )
margin_left = -240.0
margin_top = -135.0
margin_right = 240.0
margin_bottom = 135.0

[node name="BackBuffer_NTSC_3rd Set" type="BackBufferCopy" parent="3rd Set"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="3rd Set/BackBuffer_NTSC_3rd Set"]
material = SubResource( 9 )
margin_right = 480.0
margin_bottom = 270.0

[node name="2nd Set" type="Node2D" parent="."]
visible = false

[node name="BackBuffer_Grain_2nd Set" type="BackBufferCopy" parent="2nd Set"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="2nd Set/BackBuffer_Grain_2nd Set"]
material = SubResource( 8 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_VHS_2nd Set" type="BackBufferCopy" parent="2nd Set"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="2nd Set/BackBuffer_VHS_2nd Set"]
material = SubResource( 7 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_Glitch_Effect_B_2nd Set" type="BackBufferCopy" parent="2nd Set"]
position = Vector2( 240, 135 )
copy_mode = 2

[node name="ColorRect4_MAGIC!" type="ColorRect" parent="2nd Set/BackBuffer_Glitch_Effect_B_2nd Set"]
material = SubResource( 4 )
margin_left = -240.0
margin_top = -135.0
margin_right = 240.0
margin_bottom = 135.0

[node name="1st Set" type="Node2D" parent="."]
visible = false

[node name="BackBuffer_Glitch_1st Set" type="BackBufferCopy" parent="1st Set"]
copy_mode = 2

[node name="ColorRect5_GODOTRETRO" type="ColorRect" parent="1st Set/BackBuffer_Glitch_1st Set"]
material = SubResource( 19 )
margin_right = 480.0
margin_bottom = 270.0

[node name="BackBuffer_CRT2_1st Set" type="BackBufferCopy" parent="1st Set"]
position = Vector2( 240, 135 )
copy_mode = 2

[node name="ColorRect2_pas_magic" type="ColorRect" parent="1st Set/BackBuffer_CRT2_1st Set"]
material = SubResource( 2 )
margin_left = -240.0
margin_top = -135.0
margin_right = 240.0
margin_bottom = 135.0
